{"version":3,"sources":["component/contactList/ContactList.module.css","component/contactForm/ContactForm.module.css","redux/phonebook/Phonebook-operations.js","redux/phonebook/Phonebook-selectors.js","component/contactList/ContactList.js","component/contactForm/ContactForm.js","views/ContactsView.js"],"names":["module","exports","dispatch","fetchContactsRequest","axios","get","then","data","fetchContactsSuccess","catch","error","fetchContactsError","message","contact","name","number","addContactRequest","post","addContactSuccess","addContactError","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getFilter","state","phonebook","filter","getAllContacts","items","getLoading","loading","getVisibleContacts","createSelector","contacts","normalizedFilter","toLowerCase","item","includes","ContactList","this","props","fetchContacts","onDeleteContact","className","styles","contacts__list","isLoadingContacts","map","contacts__item","contacts__button","onClick","Component","connect","phonebookSelectors","phonebookOperations","ContactForm","handleChange","event","currentTarget","value","setState","handleSumbit","preventDefault","reset","checkDuplicateContacts","onSubmit","newContact","existedContacts","isDuplicateNumber","find","isDuplicateName","alert","title","form","label","label__text","type","pattern","required","onChange","form__button","text","ContactsView","Container"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,SAAW,8BAA8B,eAAiB,oCAAoC,eAAiB,oCAAoC,iBAAmB,wC,mBCAxLD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,YAAc,iCAAiC,MAAQ,2BAA2B,aAAe,oC,kHC4CxK,EAhCO,kBAAM,SAAAC,GAGxB,OAFAA,EAASC,eAEFC,IACFC,IAAI,aACJC,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcL,EAASM,YAAqBD,OACjDE,OAAM,SAAAC,GAAK,OAAIC,YAAmBD,EAAME,cA0BlC,EAvBI,SAAAL,GAAI,OAAI,SAAAL,GACvB,IAAMW,EAAU,CACZC,KAAMP,EAAKO,KACXC,OAAQR,EAAKQ,QAKjB,OAFAb,EAASc,eAEFZ,IACFa,KAAK,YAAaJ,GAClBP,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcL,EAASgB,YAAkBX,OAC9CE,OAAM,SAAAC,GAAK,OAAIR,EAASiB,YAAgBT,EAAME,eAYxC,EATO,SAAAQ,GAAE,OAAI,SAAAlB,GAGxB,OAFAA,EAASmB,eAEFjB,IACFkB,OADE,oBACkBF,IACpBd,MAAK,kBAAMJ,EAASqB,YAAqBH,OACzCX,OAAM,SAAAC,GAAK,OAAIR,EAASsB,YAAmBd,EAAME,e,QCtCpDa,EAAY,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,QAErCC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,UAAUG,OAYjC,GAAEC,WAhBE,SAAAL,GAAK,OAAIA,EAAMC,UAAUK,SAgBfP,YAAWI,iBAAgBI,mBAV7BC,YACvB,CAACL,EAAgBJ,IACjB,SAACU,EAAUP,GACP,IAAMQ,EAAmBR,EAAOS,cAChC,OAAOF,EAASP,QAAO,SAAAU,GAAI,OACvBA,EAAKxB,KAAKuB,cAAcE,SAASH,U,wBCNvCI,E,uKACF,WACIC,KAAKC,MAAMC,kB,oBAGf,WAAU,IAAD,EAC8BF,KAAKC,MAAhCZ,EADH,EACGA,MAAOc,EADV,EACUA,gBACf,OACI,qBAAKC,UAAWC,IAAOX,SAAvB,SACI,qBAAIU,UAAWC,IAAOC,eAAtB,UACKN,KAAKC,MAAMM,mBAAqB,2FAChClB,EAAMmB,KAAI,YAA2B,IAAxB7B,EAAuB,EAAvBA,GAAIN,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACpB,OACI,qBAAI8B,UAAWC,IAAOI,eAAtB,UACI,iCACKpC,EADL,MACcC,KAEd,wBACI8B,UAAWC,IAAOK,iBAClBC,QAAS,kBAAMR,EAAgBxB,IAFnC,0DAJuCA,e,GAb7CiC,aA0CXC,eAVS,SAAA5B,GAAK,MAAK,CAC9BI,MAAOyB,EAAmBtB,mBAAmBP,GAC7CsB,kBAAmBO,EAAmBxB,WAAWL,OAG1B,SAAAxB,GAAQ,MAAK,CACpC0C,gBAAiB,SAAAxB,GAAE,OAAIlB,EAASsD,EAAkCpC,KAClEuB,cAAe,kBAAMzC,EAASsD,SAGnBF,CAA6Cd,G,wBC3CtDiB,E,4MACF/B,MAAQ,CACJZ,KAAM,GACNC,OAAQ,I,EAGZ2C,aAAe,SAAAC,GAAU,IAAD,EACIA,EAAMC,cAAtB9C,EADY,EACZA,KAAM+C,EADM,EACNA,MACd,EAAKC,SAAL,eAAiBhD,EAAO+C,K,EAG5BE,aAAe,SAAAJ,GACXA,EAAMK,iBACN,EAAKC,QAED,EAAKC,uBAAuB,EAAKxC,QAGrC,EAAKgB,MAAMyB,SAAS,EAAKzC,Q,EAG7BwC,uBAAyB,SAAAE,GAAe,IAC5BC,EAAoB,EAAK3B,MAAzB2B,gBACFC,EAAoBD,EAAgBE,MACtC,qBAAGxD,SAAwBqD,EAAWrD,UAEpCyD,EAAkBH,EAAgBE,MACpC,qBAAGzD,KAAgBuB,gBAAkB+B,EAAWtD,KAAKuB,iBAGzD,GAAIiC,GAAqBE,EAErB,OADAC,MAAM,wCACC,G,EAIfR,MAAQ,WACJ,EAAKH,SAAS,CACVhD,KAAM,GACNC,OAAQ,M,4CAIhB,WACI,OACI,qCACI,oBAAI8B,UAAWC,IAAO4B,MAAtB,6BACA,uBAAMP,SAAU1B,KAAKsB,aAAclB,UAAWC,IAAO6B,KAArD,UACI,wBAAO9B,UAAWC,IAAO8B,MAAzB,UACI,sBAAM/B,UAAWC,IAAO+B,YAAxB,kBACA,uBACIC,KAAK,OACLhE,KAAK,OACLiE,QAAQ,yHACRL,MAAM,kcACNM,UAAQ,EACRnB,MAAOpB,KAAKf,MAAMZ,KAClBmE,SAAUxC,KAAKiB,kBAIvB,wBAAOb,UAAWC,IAAO8B,MAAzB,UACI,sBAAM/B,UAAWC,IAAO+B,YAAxB,oBACA,uBACIC,KAAK,MACLhE,KAAK,SAEL4D,MAAM,mlBACNM,UAAQ,EACRnB,MAAOpB,KAAKf,MAAMX,OAClBkE,SAAUxC,KAAKiB,kBAIvB,8BACI,wBAAQb,UAAWC,IAAOoC,aAAcJ,KAAK,SAA7C,qC,GA3EEzB,aA4FXC,eAPS,SAAA5B,GAAK,MAAK,CAC9B2C,gBAAiB3C,EAAMC,UAAUG,UAGV,SAAA5B,GAAQ,MAAK,CACpCiE,SAAU,SAAAgB,GAAI,OAAIjF,EAASsD,EAA+B2B,QAE/C7B,CAA6CG,G,QC7FtD2B,E,4JACF,WACI,OACI,eAACC,EAAA,EAAD,WACI,cAAC,EAAD,IACA,cAAC,EAAD,W,GALWhC,aAWZ+B","file":"static/js/3.e9fa7ec7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__3PLBd\",\"contacts__list\":\"ContactList_contacts__list__31XgJ\",\"contacts__item\":\"ContactList_contacts__item__jYUsq\",\"contacts__button\":\"ContactList_contacts__button__jk0nB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2hzsZ\",\"label\":\"ContactForm_label__37a-W\",\"label__text\":\"ContactForm_label__text__VUq4y\",\"title\":\"ContactForm_title__-Y142\",\"form__button\":\"ContactForm_form__button__2OXfr\"};","import axios from 'axios';\nimport {\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n    fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n} from './Phonebook-actions';\n\nconst fetchContacts = () => dispatch => {\n    dispatch(fetchContactsRequest());\n\n    return axios\n        .get('/contacts')\n        .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n        .catch(error => fetchContactsError(error.message));\n};\n\nconst addContact = data => dispatch => {\n    const contact = {\n        name: data.name,\n        number: data.number,\n    };\n\n    dispatch(addContactRequest());\n\n    return axios\n        .post('/contacts', contact)\n        .then(({ data }) => dispatch(addContactSuccess(data)))\n        .catch(error => dispatch(addContactError(error.message)));\n};\n\nconst deleteContact = id => dispatch => {\n    dispatch(deleteContactRequest());\n\n    return axios\n        .delete(`/contacts/${id}`)\n        .then(() => dispatch(deleteContactSuccess(id)))\n        .catch(error => dispatch(deleteContactError(error.message)));\n};\n\nexport default {\n    fetchContacts,\n    addContact,\n    deleteContact,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getLoading = state => state.phonebook.loading;\n\nconst getFilter = state => state.phonebook.filter;\n\nconst getAllContacts = state => state.phonebook.items;\n\nconst getVisibleContacts = createSelector(\n    [getAllContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(item =>\n            item.name.toLowerCase().includes(normalizedFilter),\n        );\n    },\n);\n\nexport default { getLoading, getFilter, getAllContacts, getVisibleContacts };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { phonebookOperations, phonebookSelectors } from '../../redux/phonebook';\n\nimport styles from '../contactList/ContactList.module.css';\n\nclass ContactList extends Component {\n    componentDidMount() {\n        this.props.fetchContacts();\n    }\n\n    render() {\n        const { items, onDeleteContact } = this.props;\n        return (\n            <div className={styles.contacts}>\n                <ul className={styles.contacts__list}>\n                    {this.props.isLoadingContacts && <h1>Загружаем...</h1>}\n                    {items.map(({ id, name, number }) => {\n                        return (\n                            <li className={styles.contacts__item} key={id}>\n                                <span>\n                                    {name} : {number}\n                                </span>\n                                <button\n                                    className={styles.contacts__button}\n                                    onClick={() => onDeleteContact(id)}\n                                >\n                                    Удалить\n                                </button>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    items: phonebookSelectors.getVisibleContacts(state),\n    isLoadingContacts: phonebookSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onDeleteContact: id => dispatch(phonebookOperations.deleteContact(id)),\n    fetchContacts: () => dispatch(phonebookOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }),\n    ),\n    onDeleteContact: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { phonebookOperations } from '../../redux/phonebook';\n\nimport styles from '../contactForm/ContactForm.module.css';\n\nclass ContactForm extends Component {\n    state = {\n        name: '',\n        number: '',\n    };\n\n    handleChange = event => {\n        const { name, value } = event.currentTarget;\n        this.setState({ [name]: value });\n    };\n\n    handleSumbit = event => {\n        event.preventDefault();\n        this.reset();\n\n        if (this.checkDuplicateContacts(this.state)) {\n            return;\n        }\n        this.props.onSubmit(this.state);\n    };\n\n    checkDuplicateContacts = newContact => {\n        const { existedContacts } = this.props;\n        const isDuplicateNumber = existedContacts.find(\n            ({ number }) => number === newContact.number,\n        );\n        const isDuplicateName = existedContacts.find(\n            ({ name }) => name.toLowerCase() === newContact.name.toLowerCase(),\n        );\n\n        if (isDuplicateNumber || isDuplicateName) {\n            alert('This number is already in contacts.');\n            return true;\n        }\n    };\n\n    reset = () => {\n        this.setState({\n            name: '',\n            number: '',\n        });\n    };\n\n    render() {\n        return (\n            <>\n                <h1 className={styles.title}>Add new contact</h1>\n                <form onSubmit={this.handleSumbit} className={styles.form}>\n                    <label className={styles.label}>\n                        <span className={styles.label__text}>Name</span>\n                        <input\n                            type=\"text\"\n                            name=\"name\"\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                            required\n                            value={this.state.name}\n                            onChange={this.handleChange}\n                        />\n                    </label>\n\n                    <label className={styles.label}>\n                        <span className={styles.label__text}>Number</span>\n                        <input\n                            type=\"tel\"\n                            name=\"number\"\n                            // pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n                            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n                            required\n                            value={this.state.number}\n                            onChange={this.handleChange}\n                        />\n                    </label>\n\n                    <div>\n                        <button className={styles.form__button} type=\"submit\">\n                            Add contact\n                        </button>\n                    </div>\n                </form>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    existedContacts: state.phonebook.items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSubmit: text => dispatch(phonebookOperations.addContact(text)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React, { Component } from 'react';\nimport ContactList from '../component/contactList/ContactList';\nimport ContactForm from '../component/contactForm/ContactForm';\nimport Container from '../component/container/Container';\n\nclass ContactsView extends Component {\n    render() {\n        return (\n            <Container>\n                <ContactForm />\n                <ContactList />\n            </Container>\n        );\n    }\n}\n\nexport default ContactsView;\n"],"sourceRoot":""}